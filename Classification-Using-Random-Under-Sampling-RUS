Code untuk Random Under-sampling dan Random Forest

#import library
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import recall_score, precision_score, f1_score
from sklearn import metrics
from sklearn.metrics import roc_curve, roc_auc_score
np.random.seed(42)


Step 1. Loading Dataset
dataset = pd.read_csv('datadata.csv',delimiter = ';',names=['id','account_age','no_
follower','no_following','no_userfavourites','no_lists'
,'no_tweets','no_retweets','no_
hashtags','no_usermention','no_urls','no_char','no_di
gits','Class'])

##Pemilihan Data
data = dataset.drop(['id','Class'], axis=1).values
label = dataset.drop(['id','account_age','no_follower','no_following','no_
userfavourites','no_lists','no_tweets','no_retweets','n
o_hashtags','no_usermention','no_urls','no_char','no_
digits'], axis=1).values


Step 2. Resampling
from imblearn.under_sampling import RandomUnderSampler
rus = RandomUnderSampler(return_indices=True)79
data_rus, label_rus, id_rus = rus.fit_sample(data, label)


Step 3. Split Data
data_rus_train,data_rus_test,label_rus_train,label_rus_test=train_test_split(
data_rus,label_rus,test_size=0.2,random_state=42)


Step 4. Normalisasi
mm = MinMaxScaler()
data_rus_train=mm.fit_transform(data_rus_train)
data_rus_test=mm.transform(data_rus_test)


Step 5. Klasifikasi
##Random Forest
clf = RandomForestClassifier (bootstrap=True, criterion='gini',
max_features='auto', min_samples_split = 3,
n_estimators=250, oob_score=True,
random_state = 42)

##Fitting Data
clf.fit(data_rus_train, label_rus_train)
##Training predictions (to demonstrate overfitting)
train_rus_data_clf_predictions = clf.predict(data_rus_train)
train_rus_data_clf_probs = clf.predict_proba(data_rus_train)[:, 0]

##Testing predictions (to determine performance)
clf_predictions = clf.predict(data_rus_test)
clf_probs = clf.predict_proba(data_rus_test)[:, 0]

##Predicting the Test set results
label_rus_pred = clf.predict(data_rus_test)80


Step 6. Performansi
cm = confusion_matrix(label_rus_test, label_rus_pred)
recall = recall_score(label_rus_test,label_rus_pred)
ps = precision_score(label_rus_test,label_rus_pred)
f1 = f1_score(label_rus_test,label_rus_pred)
auc = roc_auc_score(label_rus_test,label_rus_pred)
clf.oob_score = clf.score(data_rus_test, label_rus_test)
oob_error = 1 - clf.oob_score
fpr, tpr, thresholds = roc_curve(label_rus_test,label_rus_pred)
